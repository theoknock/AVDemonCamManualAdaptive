    void (^(^tick_wheel_renderer_init)(double, CaptureDeviceConfigurationControlProperty *, double *, UITouchPhase *))(void) = ^ (double radius, CaptureDeviceConfigurationControlProperty * touch_point_property, double * touch_point_angle, UITouchPhase * touch_phase){
        static UIBezierPath * tick_line;
        static double angle_offset;
        static double value_angle;
        value_angle = 225.0;
        return ^{
            if (touch_phase == UITouchPhaseBegan) {
                angle_offset = value_angle - (double)*touch_point_angle;
            } else {
                if ((double)*touch_point_angle + angle_offset < value_angle) {
                    value_angle = value_angle - 1;
                } else {
                    value_angle = value_angle + 1;
                }
            }
            [(CAShapeLayer *)view.layer setPath:
             ^ CGPathRef (void) {
//                tick_line = [UIBezierPath bezierPath];
                for (int degrees = 180; degrees < 270; degrees++) {
                    [tick_line moveToPoint:[[UIBezierPath bezierPathWithArcCenter:center
                                                                           radius:radius
                                                                       startAngle:degreesToRadians(degrees)
                                                                          endAngle:degreesToRadians(degrees)
                                                                         clockwise:FALSE] currentPoint]];
                    
                    if (degrees == (int)value_angle) { // change to if touch_angle == value_angle
                        [CaptureDeviceConfigurationPropertyButton(CaptureDeviceConfigurationControlPropertySelected) setCenter:[tick_line currentPoint]];
                    }
                    
                    [tick_line addArcWithCenter:center
                                         radius:radius * .975
                                     startAngle:degreesToRadians(degrees)
                                       endAngle:degreesToRadians(degrees)
                                      clockwise:FALSE];
                }
                return tick_line.CGPath;
            }()];
        };
    };

    // (((control_renderer_state) ^= (ControlRendererStateValue)), ((control_renderer_state) ^= (ControlRendererStateProperty)), ((control_renderer_state) ^= (ControlRendererStateValue)))

/////////////



//            UISelectionFeedbackGenerator * haptic_feedback = [[UISelectionFeedbackGenerator alloc] init];
//            [haptic_feedback prepare];
//                [haptic_feedback selectionChanged];
//                [haptic_feedback prepare];



//static void * (^getIvarPointer)(id, char const *) = ^ void * (id object, char const * name) {
//    Ivar ivar = class_getInstanceVariable(object_getClass(object), name);
//
//    return (!ivar) ? 0 : (uint8_t *)(__bridge void *)object + ivar_getOffset(ivar);
//};
//
//- (CGRect*)rectPointer {
//    CGRect *ptr = getIvarPointer(self, "_rect");
//    NSAssert(ptr == &_rect, @"runtime discovered pointer should be same as iVar pointer");
//    return ptr;
//}


//    static const int (^bitwiseSubtract)(int, int) = ^ int (int x, int y) {
//        while (y != 0)
//        {
//            int borrow = (~x) & y;
//            x = x ^ y;
//            y = borrow << 1;
//    }
//
//    return x;
//};
//
//
//
//
//// instead of blocks that return double, rewrite to take a pointer to a double that is updated
//// A given double is updated by only one block, even if its value is used by other blocks
//// A block reference that executes that one block can be used by other blocks to update its value
//// No pointer to a double sits any higher in the block chain than the first block to use it
//
//
//
//
//
//static CaptureDeviceConfigurationControlProperty (^touch_point_property)(void) = ^ CaptureDeviceConfigurationControlProperty (void) {
//    CaptureDeviceConfigurationControlProperty property = (CaptureDeviceConfigurationControlProperty)round(rescale(touch_point_angle(), CaptureDeviceConfigurationPropertyButtonAngle(CaptureDeviceConfigurationControlPropertyTorchLevel), CaptureDeviceConfigurationPropertyButtonAngle(CaptureDeviceConfigurationControlPropertyZoomFactor), CaptureDeviceConfigurationControlPropertyTorchLevel, CaptureDeviceConfigurationControlPropertyZoomFactor));
//
//    return property;
//};
//
//static void (^(^ControlRenderer[2])(__kindof __weak UIView *))(AVCaptureDevice *, dispatch_block_t) = { ^ (__kindof __weak UIView * view) {
//        return ^ (AVCaptureDevice * capture_device, dispatch_block_t draw_view) {
//            for (CaptureDeviceConfigurationControlProperty property = CaptureDeviceConfigurationControlPropertyTorchLevel; property < CaptureDeviceConfigurationControlPropertySelected; property++) {
//                [CaptureDeviceConfigurationPropertyButton(property) setCenter:[[UIBezierPath bezierPathWithArcCenter:center radius:radius startAngle:degreesToRadians(CaptureDeviceConfigurationPropertyButtonAngle(property)) endAngle:degreesToRadians(CaptureDeviceConfigurationPropertyButtonAngle(property)) clockwise:FALSE]
//                                                                               currentPoint]];
//                [CaptureDeviceConfigurationPropertyButton(property) setSelected:(property == (CaptureDeviceConfigurationControlProperty)[CaptureDeviceConfigurationPropertyButton(touch_point_property()) tag])];
//            }
//            draw_view();
//        };
//},
//    ^ (__kindof __weak UIView * view) {
//        return ^ (AVCaptureDevice * capture_device, dispatch_block_t draw_view) {
////                CaptureDeviceConfigurationControlProperty selected_property = (CaptureDeviceConfigurationControlProperty)[CaptureDeviceConfigurationPropertyButton(touch_point_property()) tag];
//                double property_value_radians = degreesToRadians(touch_point_angle()); /*CaptureDeviceConfigurationPropertyValueAngle((selected_property == CaptureDeviceConfigurationControlPropertyTorchLevel)
//                                                                                                              ? (double[3]){[capture_device torchLevel], 0.0, 1.0}
//                                                                                                              : (selected_property == CaptureDeviceConfigurationControlPropertyLensPosition)
//                                                                                                              ? (double[3]){[capture_device lensPosition], 0.0, 1.0}
//                                                                                                              : (selected_property == CaptureDeviceConfigurationControlPropertyExposureDuration)
//                                                                                                              ? (double[3]){CMTimeGetSeconds([capture_device exposureDuration]), CMTimeGetSeconds(capture_device.activeFormat.minExposureDuration), 1.0/3.0}
//                                                                                                              : (selected_property == CaptureDeviceConfigurationControlPropertyISO)
//                                                                                                              ? (double[3]){capture_device.ISO, capture_device.activeFormat.minISO, capture_device.activeFormat.maxISO}
//                                                                                                              : (selected_property == CaptureDeviceConfigurationControlPropertyZoomFactor)
//                                                                                                              ? (double[3]){capture_device.videoZoomFactor, capture_device.minAvailableVideoZoomFactor, capture_device.maxAvailableVideoZoomFactor}
//                                                                                                              : (double[3]){CaptureDeviceConfigurationPropertyButtonAngle(CaptureDeviceConfigurationControlPropertyTorchLevel), CaptureDeviceConfigurationPropertyButtonAngle(CaptureDeviceConfigurationControlPropertyTorchLevel), CaptureDeviceConfigurationPropertyButtonAngle(CaptureDeviceConfigurationControlPropertyZoomFactor)}));*/
//
//                [CaptureDeviceConfigurationPropertyButton(CaptureDeviceConfigurationControlPropertySelected) setCenter:[[UIBezierPath bezierPathWithArcCenter:center radius:radius startAngle:property_value_radians endAngle:property_value_radians clockwise:FALSE]
//                                                                                                                        currentPoint]];
//                draw_view();
//            };
//    }
//};
//
//extern void const * (^render_control_ptr)(dispatch_block_t _Nullable);
//static void (^render_control)(dispatch_block_t _Nullable);
//
//void (^(^touch_event_handler)(void))(UITouch * _Nullable) = ^ (void) {
//    return ^ (UITouch * _Nullable touch_ptr_ref) {
//        static CGPoint touch_point;
//        static UITouchPhase touch_phase;
//        (touch_ptr_ref != nil)
//        ? ^{
//            touch_ptr = touch_ptr_ref;
//        }()
//        : ^{
//
//        }();
//        touch_point = [touch_ptr preciseLocationInView:touch_ptr.view];
//        touch_phase = [touch_ptr phase];
//
//        radius = ^ CGFloat (void) {
//            CGFloat x_radius     = touch_point.x - center.x;
//            CGFloat y_radius     = touch_point.y - center.y;
//            CGFloat r            = sqrt(pow(x_radius, 2.0) +
//                                        pow(y_radius, 2.0));
//            return fmaxf(fminf(center.x - CGRectGetMidX(CaptureDeviceConfigurationPropertyButton(CaptureDeviceConfigurationControlPropertyTorchLevel).bounds), r), CGRectGetMidX(UIScreen.mainScreen.bounds) - CGRectGetMaxX(CaptureDeviceConfigurationPropertyButton(CaptureDeviceConfigurationControlPropertyTorchLevel).bounds));
//        }();
//
//        render_control(capture_device, ^{ [control_view setNeedsDisplay]; });
//
//        if (touch_ptr.phase == UITouchPhaseEnded) {
////            [CaptureDeviceConfigurationPropertyButton(CaptureDeviceConfigurationControlPropertySelected) setCenter:touch_point];
////            [CaptureDeviceConfigurationPropertyButton(touch_point_property()) sendActionsForControlEvents:UIControlEventTouchUpInside];
////            CaptureDeviceConfigurationControlProperty next_property = (touch_point_property() + 1) % 4;
////            if ([CaptureDeviceConfigurationPropertyButton(next_property) isHidden]) {
////                (render_control = ControlRenderer[0](view))(capture_device, ^{ [view setNeedsDisplay]; });
////            } else {
////                render_control = ControlRenderer[1](view);
////            }
//        }
//    };
//};
//static void (^handle_touch_event)(UITouch * _Nullable);
//
//
//// Why do this? In a method in which block is executed, there may be a property that is only available from within that method, but which is used by other blocks in the chain.
//// Take touchesBegan and UITouch, for example, where block is the event handler executed in that method; in that case, block_init could be passed the UITouch object,
////
//static int (^block)(int *); // block
////static int (^(^)(int *))(int *); // global to block
////static int (^(^(^)(int *))(int *))(int *); // global to block
//static int (^(^(^(^block_init)(void))(int *))(int *))(int *) = ^ { // init
//        return (^ (int * _Nonnull const * _Nonnull a) {
//            return (^ (int * b) {
//                return (^ int (int * c) {
//                    return *********a + *b + *c;
//                });
//            });
//        });
//};
//
//static int a_int = 1;
//static int * a_ptr;
//static int b_int = 2;
//static const int * b_ptr = &b_int;
//static int c_int = 3;
//static const int * c_ptr = &c_int;
//
//
//- (void)test {
//    a_ptr = &a_int;
//    block = block_init()(&a_ptr)(b_ptr);
//    NSLog(@"First result  == %d", block(c_ptr));
//    a_int = 2;
//    NSLog(@"Second result == %d", block(c_ptr));
//}

//- (void)drawRect:(CGRect)rect
//{
//    // TO-DO: Create a block initializer that return a block containing the following code, and execute it here
//    //        Integrate it as part of an Rx-style block structure
////    UIBezierPath * path[2] = {[UIBezierPath bezierPath], [UIBezierPath bezierPath]};
////    int degrees[2] = {180, (int)touch_point_angle()};
////    int end[2] = {(int)touch_point_angle(), 270};
////    UIColor * color[2] = {[UIColor colorWithRed:255/255 green:252/255 blue:121/255 alpha:1.0], [UIColor colorWithRed:4/255 green:51/255 blue:255/255 alpha:1.0]};
////    for (int i = 0; i < 2; i++) {
////        for (; degrees[i] < end[i]; degrees[i]++) {
////            [path[i] moveToPoint:[[UIBezierPath bezierPathWithArcCenter:center
////                                                                 radius:radius
////                                                             startAngle:degreesToRadians(degrees[i])
////                                                               endAngle:degreesToRadians(degrees[i])
////                                                              clockwise:FALSE] currentPoint]];
////            [path[i] addLineToPoint:[[UIBezierPath bezierPathWithArcCenter:center
////                                                                    radius:radius * 0.975
////                                                                startAngle:degreesToRadians(degrees[i])
////                                                                  endAngle:degreesToRadians(degrees[i])
////                                                                 clockwise:FALSE] currentPoint]];
////            [path[i] closePath];
////        }
////        [color[i] setStroke];
////        [path[i] stroke];
////    }
//}
